// Klib ABI Dump
// Targets: [wasmJs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <valkyrie.components:ir>
final enum class io.github.composegears.valkyrie.ir.util/DominantShade : kotlin/Enum<io.github.composegears.valkyrie.ir.util/DominantShade> { // io.github.composegears.valkyrie.ir.util/DominantShade|null[0]
    enum entry Black // io.github.composegears.valkyrie.ir.util/DominantShade.Black|null[0]
    enum entry Mixed // io.github.composegears.valkyrie.ir.util/DominantShade.Mixed|null[0]
    enum entry White // io.github.composegears.valkyrie.ir.util/DominantShade.White|null[0]

    final val entries // io.github.composegears.valkyrie.ir.util/DominantShade.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.github.composegears.valkyrie.ir.util/DominantShade> // io.github.composegears.valkyrie.ir.util/DominantShade.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.github.composegears.valkyrie.ir.util/DominantShade // io.github.composegears.valkyrie.ir.util/DominantShade.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.github.composegears.valkyrie.ir.util/DominantShade> // io.github.composegears.valkyrie.ir.util/DominantShade.values|values#static(){}[0]
}

final enum class io.github.composegears.valkyrie.ir/IrPathFillType : kotlin/Enum<io.github.composegears.valkyrie.ir/IrPathFillType> { // io.github.composegears.valkyrie.ir/IrPathFillType|null[0]
    enum entry EvenOdd // io.github.composegears.valkyrie.ir/IrPathFillType.EvenOdd|null[0]
    enum entry NonZero // io.github.composegears.valkyrie.ir/IrPathFillType.NonZero|null[0]

    final val entries // io.github.composegears.valkyrie.ir/IrPathFillType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.github.composegears.valkyrie.ir/IrPathFillType> // io.github.composegears.valkyrie.ir/IrPathFillType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.github.composegears.valkyrie.ir/IrPathFillType // io.github.composegears.valkyrie.ir/IrPathFillType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.github.composegears.valkyrie.ir/IrPathFillType> // io.github.composegears.valkyrie.ir/IrPathFillType.values|values#static(){}[0]
}

final enum class io.github.composegears.valkyrie.ir/IrStrokeLineCap : kotlin/Enum<io.github.composegears.valkyrie.ir/IrStrokeLineCap> { // io.github.composegears.valkyrie.ir/IrStrokeLineCap|null[0]
    enum entry Butt // io.github.composegears.valkyrie.ir/IrStrokeLineCap.Butt|null[0]
    enum entry Round // io.github.composegears.valkyrie.ir/IrStrokeLineCap.Round|null[0]
    enum entry Square // io.github.composegears.valkyrie.ir/IrStrokeLineCap.Square|null[0]

    final val entries // io.github.composegears.valkyrie.ir/IrStrokeLineCap.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.github.composegears.valkyrie.ir/IrStrokeLineCap> // io.github.composegears.valkyrie.ir/IrStrokeLineCap.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.github.composegears.valkyrie.ir/IrStrokeLineCap // io.github.composegears.valkyrie.ir/IrStrokeLineCap.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.github.composegears.valkyrie.ir/IrStrokeLineCap> // io.github.composegears.valkyrie.ir/IrStrokeLineCap.values|values#static(){}[0]
}

final enum class io.github.composegears.valkyrie.ir/IrStrokeLineJoin : kotlin/Enum<io.github.composegears.valkyrie.ir/IrStrokeLineJoin> { // io.github.composegears.valkyrie.ir/IrStrokeLineJoin|null[0]
    enum entry Bevel // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.Bevel|null[0]
    enum entry Miter // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.Miter|null[0]
    enum entry Round // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.Round|null[0]

    final val entries // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.github.composegears.valkyrie.ir/IrStrokeLineJoin> // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.github.composegears.valkyrie.ir/IrStrokeLineJoin // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.github.composegears.valkyrie.ir/IrStrokeLineJoin> // io.github.composegears.valkyrie.ir/IrStrokeLineJoin.values|values#static(){}[0]
}

sealed interface io.github.composegears.valkyrie.ir/IrFill { // io.github.composegears.valkyrie.ir/IrFill|null[0]
    final class Color : io.github.composegears.valkyrie.ir/IrFill { // io.github.composegears.valkyrie.ir/IrFill.Color|null[0]
        constructor <init>(io.github.composegears.valkyrie.ir/IrColor) // io.github.composegears.valkyrie.ir/IrFill.Color.<init>|<init>(io.github.composegears.valkyrie.ir.IrColor){}[0]

        final val irColor // io.github.composegears.valkyrie.ir/IrFill.Color.irColor|{}irColor[0]
            final fun <get-irColor>(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrFill.Color.irColor.<get-irColor>|<get-irColor>(){}[0]

        final fun component1(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrFill.Color.component1|component1(){}[0]
        final fun copy(io.github.composegears.valkyrie.ir/IrColor = ...): io.github.composegears.valkyrie.ir/IrFill.Color // io.github.composegears.valkyrie.ir/IrFill.Color.copy|copy(io.github.composegears.valkyrie.ir.IrColor){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrFill.Color.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrFill.Color.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrFill.Color.toString|toString(){}[0]
    }

    final class ColorStop { // io.github.composegears.valkyrie.ir/IrFill.ColorStop|null[0]
        constructor <init>(kotlin/Float, io.github.composegears.valkyrie.ir/IrColor) // io.github.composegears.valkyrie.ir/IrFill.ColorStop.<init>|<init>(kotlin.Float;io.github.composegears.valkyrie.ir.IrColor){}[0]

        final val irColor // io.github.composegears.valkyrie.ir/IrFill.ColorStop.irColor|{}irColor[0]
            final fun <get-irColor>(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrFill.ColorStop.irColor.<get-irColor>|<get-irColor>(){}[0]
        final val offset // io.github.composegears.valkyrie.ir/IrFill.ColorStop.offset|{}offset[0]
            final fun <get-offset>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.ColorStop.offset.<get-offset>|<get-offset>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.ColorStop.component1|component1(){}[0]
        final fun component2(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrFill.ColorStop.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrColor = ...): io.github.composegears.valkyrie.ir/IrFill.ColorStop // io.github.composegears.valkyrie.ir/IrFill.ColorStop.copy|copy(kotlin.Float;io.github.composegears.valkyrie.ir.IrColor){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrFill.ColorStop.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrFill.ColorStop.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrFill.ColorStop.toString|toString(){}[0]
    }

    final class LinearGradient : io.github.composegears.valkyrie.ir/IrFill { // io.github.composegears.valkyrie.ir/IrFill.LinearGradient|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> = ...) // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrFill.ColorStop>){}[0]

        final val colorStops // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.colorStops|{}colorStops[0]
            final fun <get-colorStops>(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.colorStops.<get-colorStops>|<get-colorStops>(){}[0]
        final val endX // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.endX|{}endX[0]
            final fun <get-endX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.endX.<get-endX>|<get-endX>(){}[0]
        final val endY // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.endY|{}endY[0]
            final fun <get-endY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.endY.<get-endY>|<get-endY>(){}[0]
        final val startX // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.startX|{}startX[0]
            final fun <get-startX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.startX.<get-startX>|<get-startX>(){}[0]
        final val startY // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.startY|{}startY[0]
            final fun <get-startY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.startY.<get-startY>|<get-startY>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.component4|component4(){}[0]
        final fun component5(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.component5|component5(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> = ...): io.github.composegears.valkyrie.ir/IrFill.LinearGradient // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrFill.ColorStop>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrFill.LinearGradient.toString|toString(){}[0]
    }

    final class RadialGradient : io.github.composegears.valkyrie.ir/IrFill { // io.github.composegears.valkyrie.ir/IrFill.RadialGradient|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> = ...) // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrFill.ColorStop>){}[0]

        final val centerX // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.centerX|{}centerX[0]
            final fun <get-centerX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.centerX.<get-centerX>|<get-centerX>(){}[0]
        final val centerY // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.centerY|{}centerY[0]
            final fun <get-centerY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.centerY.<get-centerY>|<get-centerY>(){}[0]
        final val colorStops // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.colorStops|{}colorStops[0]
            final fun <get-colorStops>(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.colorStops.<get-colorStops>|<get-colorStops>(){}[0]
        final val radius // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.radius|{}radius[0]
            final fun <get-radius>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.radius.<get-radius>|<get-radius>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.component3|component3(){}[0]
        final fun component4(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrFill.ColorStop> = ...): io.github.composegears.valkyrie.ir/IrFill.RadialGradient // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrFill.ColorStop>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrFill.RadialGradient.toString|toString(){}[0]
    }
}

sealed interface io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode|null[0]
    final class ArcTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]

        final val arcStartX // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.arcStartX|{}arcStartX[0]
            final fun <get-arcStartX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.arcStartX.<get-arcStartX>|<get-arcStartX>(){}[0]
        final val arcStartY // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.arcStartY|{}arcStartY[0]
            final fun <get-arcStartY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.arcStartY.<get-arcStartY>|<get-arcStartY>(){}[0]
        final val horizontalEllipseRadius // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.horizontalEllipseRadius|{}horizontalEllipseRadius[0]
            final fun <get-horizontalEllipseRadius>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.horizontalEllipseRadius.<get-horizontalEllipseRadius>|<get-horizontalEllipseRadius>(){}[0]
        final val isMoreThanHalf // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.isMoreThanHalf|{}isMoreThanHalf[0]
            final fun <get-isMoreThanHalf>(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.isMoreThanHalf.<get-isMoreThanHalf>|<get-isMoreThanHalf>(){}[0]
        final val isPositiveArc // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.isPositiveArc|{}isPositiveArc[0]
            final fun <get-isPositiveArc>(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.isPositiveArc.<get-isPositiveArc>|<get-isPositiveArc>(){}[0]
        final val theta // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.theta|{}theta[0]
            final fun <get-theta>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.theta.<get-theta>|<get-theta>(){}[0]
        final val verticalEllipseRadius // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.verticalEllipseRadius|{}verticalEllipseRadius[0]
            final fun <get-verticalEllipseRadius>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.verticalEllipseRadius.<get-verticalEllipseRadius>|<get-verticalEllipseRadius>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component6|component6(){}[0]
        final fun component7(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.component7|component7(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.ArcTo // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.ArcTo.toString|toString(){}[0]
    }

    final class CurveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x2.<get-x2>|<get-x2>(){}[0]
        final val x3 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x3|{}x3[0]
            final fun <get-x3>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.x3.<get-x3>|<get-x3>(){}[0]
        final val y1 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y2.<get-y2>|<get-y2>(){}[0]
        final val y3 // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y3|{}y3[0]
            final fun <get-y3>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.y3.<get-y3>|<get-y3>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component4|component4(){}[0]
        final fun component5(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.component6|component6(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.CurveTo // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.CurveTo.toString|toString(){}[0]
    }

    final class HorizontalTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo|null[0]
        constructor <init>(kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.<init>|<init>(kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.x.<get-x>|<get-x>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.HorizontalTo.toString|toString(){}[0]
    }

    final class LineTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.LineTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.LineTo // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.LineTo.toString|toString(){}[0]
    }

    final class MoveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.MoveTo // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.MoveTo.toString|toString(){}[0]
    }

    final class QuadTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.QuadTo // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.QuadTo.toString|toString(){}[0]
    }

    final class ReflectiveCurveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveCurveTo.toString|toString(){}[0]
    }

    final class ReflectiveQuadTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.ReflectiveQuadTo.toString|toString(){}[0]
    }

    final class RelativeArcTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Boolean, kotlin/Boolean, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]

        final val arcStartDx // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.arcStartDx|{}arcStartDx[0]
            final fun <get-arcStartDx>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.arcStartDx.<get-arcStartDx>|<get-arcStartDx>(){}[0]
        final val arcStartDy // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.arcStartDy|{}arcStartDy[0]
            final fun <get-arcStartDy>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.arcStartDy.<get-arcStartDy>|<get-arcStartDy>(){}[0]
        final val horizontalEllipseRadius // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.horizontalEllipseRadius|{}horizontalEllipseRadius[0]
            final fun <get-horizontalEllipseRadius>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.horizontalEllipseRadius.<get-horizontalEllipseRadius>|<get-horizontalEllipseRadius>(){}[0]
        final val isMoreThanHalf // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.isMoreThanHalf|{}isMoreThanHalf[0]
            final fun <get-isMoreThanHalf>(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.isMoreThanHalf.<get-isMoreThanHalf>|<get-isMoreThanHalf>(){}[0]
        final val isPositiveArc // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.isPositiveArc|{}isPositiveArc[0]
            final fun <get-isPositiveArc>(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.isPositiveArc.<get-isPositiveArc>|<get-isPositiveArc>(){}[0]
        final val theta // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.theta|{}theta[0]
            final fun <get-theta>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.theta.<get-theta>|<get-theta>(){}[0]
        final val verticalEllipseRadius // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.verticalEllipseRadius|{}verticalEllipseRadius[0]
            final fun <get-verticalEllipseRadius>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.verticalEllipseRadius.<get-verticalEllipseRadius>|<get-verticalEllipseRadius>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component6|component6(){}[0]
        final fun component7(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.component7|component7(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Boolean;kotlin.Boolean;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeArcTo.toString|toString(){}[0]
    }

    final class RelativeCurveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val dx1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx1|{}dx1[0]
            final fun <get-dx1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx1.<get-dx1>|<get-dx1>(){}[0]
        final val dx2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx2|{}dx2[0]
            final fun <get-dx2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx2.<get-dx2>|<get-dx2>(){}[0]
        final val dx3 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx3|{}dx3[0]
            final fun <get-dx3>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dx3.<get-dx3>|<get-dx3>(){}[0]
        final val dy1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy1|{}dy1[0]
            final fun <get-dy1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy1.<get-dy1>|<get-dy1>(){}[0]
        final val dy2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy2|{}dy2[0]
            final fun <get-dy2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy2.<get-dy2>|<get-dy2>(){}[0]
        final val dy3 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy3|{}dy3[0]
            final fun <get-dy3>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.dy3.<get-dy3>|<get-dy3>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component4|component4(){}[0]
        final fun component5(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.component6|component6(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeCurveTo.toString|toString(){}[0]
    }

    final class RelativeHorizontalTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo|null[0]
        constructor <init>(kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.<init>|<init>(kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.x.<get-x>|<get-x>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeHorizontalTo.toString|toString(){}[0]
    }

    final class RelativeLineTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeLineTo.toString|toString(){}[0]
    }

    final class RelativeMoveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeMoveTo.toString|toString(){}[0]
    }

    final class RelativeQuadTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeQuadTo.toString|toString(){}[0]
    }

    final class RelativeReflectiveCurveTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.<init>|<init>(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

        final val x1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.x1|{}x1[0]
            final fun <get-x1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.x1.<get-x1>|<get-x1>(){}[0]
        final val x2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.x2|{}x2[0]
            final fun <get-x2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.x2.<get-x2>|<get-x2>(){}[0]
        final val y1 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.y1|{}y1[0]
            final fun <get-y1>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.y1.<get-y1>|<get-y1>(){}[0]
        final val y2 // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.y2|{}y2[0]
            final fun <get-y2>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.y2.<get-y2>|<get-y2>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.component4|component4(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.copy|copy(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveCurveTo.toString|toString(){}[0]
    }

    final class RelativeReflectiveQuadTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo|null[0]
        constructor <init>(kotlin/Float, kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.<init>|<init>(kotlin.Float;kotlin.Float){}[0]

        final val x // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.x|{}x[0]
            final fun <get-x>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.x.<get-x>|<get-x>(){}[0]
        final val y // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.component1|component1(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.component2|component2(){}[0]
        final fun copy(kotlin/Float = ..., kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.copy|copy(kotlin.Float;kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeReflectiveQuadTo.toString|toString(){}[0]
    }

    final class RelativeVerticalTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo|null[0]
        constructor <init>(kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.<init>|<init>(kotlin.Float){}[0]

        final val y // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.RelativeVerticalTo.toString|toString(){}[0]
    }

    final class VerticalTo : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo|null[0]
        constructor <init>(kotlin/Float) // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.<init>|<init>(kotlin.Float){}[0]

        final val y // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.y|{}y[0]
            final fun <get-y>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Float // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.component1|component1(){}[0]
        final fun copy(kotlin/Float = ...): io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.copy|copy(kotlin.Float){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.VerticalTo.toString|toString(){}[0]
    }

    final object Close : io.github.composegears.valkyrie.ir/IrPathNode { // io.github.composegears.valkyrie.ir/IrPathNode.Close|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrPathNode.Close.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrPathNode.Close.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrPathNode.Close.toString|toString(){}[0]
    }
}

sealed interface io.github.composegears.valkyrie.ir/IrStroke { // io.github.composegears.valkyrie.ir/IrStroke|null[0]
    final class Color : io.github.composegears.valkyrie.ir/IrStroke { // io.github.composegears.valkyrie.ir/IrStroke.Color|null[0]
        constructor <init>(io.github.composegears.valkyrie.ir/IrColor) // io.github.composegears.valkyrie.ir/IrStroke.Color.<init>|<init>(io.github.composegears.valkyrie.ir.IrColor){}[0]

        final val irColor // io.github.composegears.valkyrie.ir/IrStroke.Color.irColor|{}irColor[0]
            final fun <get-irColor>(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrStroke.Color.irColor.<get-irColor>|<get-irColor>(){}[0]

        final fun component1(): io.github.composegears.valkyrie.ir/IrColor // io.github.composegears.valkyrie.ir/IrStroke.Color.component1|component1(){}[0]
        final fun copy(io.github.composegears.valkyrie.ir/IrColor = ...): io.github.composegears.valkyrie.ir/IrStroke.Color // io.github.composegears.valkyrie.ir/IrStroke.Color.copy|copy(io.github.composegears.valkyrie.ir.IrColor){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrStroke.Color.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrStroke.Color.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrStroke.Color.toString|toString(){}[0]
    }
}

sealed interface io.github.composegears.valkyrie.ir/IrVectorNode { // io.github.composegears.valkyrie.ir/IrVectorNode|null[0]
    final class IrGroup : io.github.composegears.valkyrie.ir/IrVectorNode { // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup|null[0]
        constructor <init>(kotlin/String = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrPathNode>, kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrVectorNode>) // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.<init>|<init>(kotlin.String;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrPathNode>;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrVectorNode>){}[0]

        final val clipPathData // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.clipPathData|{}clipPathData[0]
            final fun <get-clipPathData>(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrPathNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.clipPathData.<get-clipPathData>|<get-clipPathData>(){}[0]
        final val name // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.name|{}name[0]
            final fun <get-name>(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.name.<get-name>|<get-name>(){}[0]
        final val nodes // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.nodes|{}nodes[0]
            final fun <get-nodes>(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrVectorNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.nodes.<get-nodes>|<get-nodes>(){}[0]
        final val pivotX // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.pivotX|{}pivotX[0]
            final fun <get-pivotX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.pivotX.<get-pivotX>|<get-pivotX>(){}[0]
        final val pivotY // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.pivotY|{}pivotY[0]
            final fun <get-pivotY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.pivotY.<get-pivotY>|<get-pivotY>(){}[0]
        final val rotate // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.rotate|{}rotate[0]
            final fun <get-rotate>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.rotate.<get-rotate>|<get-rotate>(){}[0]
        final val scaleX // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.scaleX|{}scaleX[0]
            final fun <get-scaleX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.scaleX.<get-scaleX>|<get-scaleX>(){}[0]
        final val scaleY // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.scaleY|{}scaleY[0]
            final fun <get-scaleY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.scaleY.<get-scaleY>|<get-scaleY>(){}[0]
        final val translationX // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.translationX|{}translationX[0]
            final fun <get-translationX>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.translationX.<get-translationX>|<get-translationX>(){}[0]
        final val translationY // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.translationY|{}translationY[0]
            final fun <get-translationY>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.translationY.<get-translationY>|<get-translationY>(){}[0]

        final fun component1(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component1|component1(){}[0]
        final fun component10(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrVectorNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component10|component10(){}[0]
        final fun component2(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component3|component3(){}[0]
        final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component4|component4(){}[0]
        final fun component5(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component6|component6(){}[0]
        final fun component7(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component7|component7(){}[0]
        final fun component8(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component8|component8(){}[0]
        final fun component9(): kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrPathNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.component9|component9(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrPathNode> = ..., kotlin.collections/MutableList<io.github.composegears.valkyrie.ir/IrVectorNode> = ...): io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.copy|copy(kotlin.String;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrPathNode>;kotlin.collections.MutableList<io.github.composegears.valkyrie.ir.IrVectorNode>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrGroup.toString|toString(){}[0]
    }

    final class IrPath : io.github.composegears.valkyrie.ir/IrVectorNode { // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath|null[0]
        constructor <init>(kotlin/String = ..., io.github.composegears.valkyrie.ir/IrFill? = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrStroke? = ..., kotlin/Float = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrStrokeLineCap = ..., io.github.composegears.valkyrie.ir/IrStrokeLineJoin = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrPathFillType = ..., kotlin.collections/List<io.github.composegears.valkyrie.ir/IrPathNode>) // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.<init>|<init>(kotlin.String;io.github.composegears.valkyrie.ir.IrFill?;kotlin.Float;io.github.composegears.valkyrie.ir.IrStroke?;kotlin.Float;kotlin.Float;io.github.composegears.valkyrie.ir.IrStrokeLineCap;io.github.composegears.valkyrie.ir.IrStrokeLineJoin;kotlin.Float;io.github.composegears.valkyrie.ir.IrPathFillType;kotlin.collections.List<io.github.composegears.valkyrie.ir.IrPathNode>){}[0]

        final val fill // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.fill|{}fill[0]
            final fun <get-fill>(): io.github.composegears.valkyrie.ir/IrFill? // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.fill.<get-fill>|<get-fill>(){}[0]
        final val fillAlpha // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.fillAlpha|{}fillAlpha[0]
            final fun <get-fillAlpha>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.fillAlpha.<get-fillAlpha>|<get-fillAlpha>(){}[0]
        final val name // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.name|{}name[0]
            final fun <get-name>(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.name.<get-name>|<get-name>(){}[0]
        final val pathFillType // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.pathFillType|{}pathFillType[0]
            final fun <get-pathFillType>(): io.github.composegears.valkyrie.ir/IrPathFillType // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.pathFillType.<get-pathFillType>|<get-pathFillType>(){}[0]
        final val paths // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.paths|{}paths[0]
            final fun <get-paths>(): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrPathNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.paths.<get-paths>|<get-paths>(){}[0]
        final val stroke // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.stroke|{}stroke[0]
            final fun <get-stroke>(): io.github.composegears.valkyrie.ir/IrStroke? // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.stroke.<get-stroke>|<get-stroke>(){}[0]
        final val strokeAlpha // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeAlpha|{}strokeAlpha[0]
            final fun <get-strokeAlpha>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeAlpha.<get-strokeAlpha>|<get-strokeAlpha>(){}[0]
        final val strokeLineCap // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineCap|{}strokeLineCap[0]
            final fun <get-strokeLineCap>(): io.github.composegears.valkyrie.ir/IrStrokeLineCap // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineCap.<get-strokeLineCap>|<get-strokeLineCap>(){}[0]
        final val strokeLineJoin // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineJoin|{}strokeLineJoin[0]
            final fun <get-strokeLineJoin>(): io.github.composegears.valkyrie.ir/IrStrokeLineJoin // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineJoin.<get-strokeLineJoin>|<get-strokeLineJoin>(){}[0]
        final val strokeLineMiter // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineMiter|{}strokeLineMiter[0]
            final fun <get-strokeLineMiter>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineMiter.<get-strokeLineMiter>|<get-strokeLineMiter>(){}[0]
        final val strokeLineWidth // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineWidth|{}strokeLineWidth[0]
            final fun <get-strokeLineWidth>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.strokeLineWidth.<get-strokeLineWidth>|<get-strokeLineWidth>(){}[0]

        final fun component1(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component1|component1(){}[0]
        final fun component10(): io.github.composegears.valkyrie.ir/IrPathFillType // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component10|component10(){}[0]
        final fun component11(): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrPathNode> // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component11|component11(){}[0]
        final fun component2(): io.github.composegears.valkyrie.ir/IrFill? // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component2|component2(){}[0]
        final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component3|component3(){}[0]
        final fun component4(): io.github.composegears.valkyrie.ir/IrStroke? // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component4|component4(){}[0]
        final fun component5(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component5|component5(){}[0]
        final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component6|component6(){}[0]
        final fun component7(): io.github.composegears.valkyrie.ir/IrStrokeLineCap // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component7|component7(){}[0]
        final fun component8(): io.github.composegears.valkyrie.ir/IrStrokeLineJoin // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component8|component8(){}[0]
        final fun component9(): kotlin/Float // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.component9|component9(){}[0]
        final fun copy(kotlin/String = ..., io.github.composegears.valkyrie.ir/IrFill? = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrStroke? = ..., kotlin/Float = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrStrokeLineCap = ..., io.github.composegears.valkyrie.ir/IrStrokeLineJoin = ..., kotlin/Float = ..., io.github.composegears.valkyrie.ir/IrPathFillType = ..., kotlin.collections/List<io.github.composegears.valkyrie.ir/IrPathNode> = ...): io.github.composegears.valkyrie.ir/IrVectorNode.IrPath // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.copy|copy(kotlin.String;io.github.composegears.valkyrie.ir.IrFill?;kotlin.Float;io.github.composegears.valkyrie.ir.IrStroke?;kotlin.Float;kotlin.Float;io.github.composegears.valkyrie.ir.IrStrokeLineCap;io.github.composegears.valkyrie.ir.IrStrokeLineJoin;kotlin.Float;io.github.composegears.valkyrie.ir.IrPathFillType;kotlin.collections.List<io.github.composegears.valkyrie.ir.IrPathNode>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrVectorNode.IrPath.toString|toString(){}[0]
    }
}

final class io.github.composegears.valkyrie.ir/IrImageVector { // io.github.composegears.valkyrie.ir/IrImageVector|null[0]
    constructor <init>(kotlin/String = ..., kotlin/Boolean = ..., kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float, kotlin.collections/List<io.github.composegears.valkyrie.ir/IrVectorNode>) // io.github.composegears.valkyrie.ir/IrImageVector.<init>|<init>(kotlin.String;kotlin.Boolean;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.List<io.github.composegears.valkyrie.ir.IrVectorNode>){}[0]

    final val autoMirror // io.github.composegears.valkyrie.ir/IrImageVector.autoMirror|{}autoMirror[0]
        final fun <get-autoMirror>(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrImageVector.autoMirror.<get-autoMirror>|<get-autoMirror>(){}[0]
    final val defaultHeight // io.github.composegears.valkyrie.ir/IrImageVector.defaultHeight|{}defaultHeight[0]
        final fun <get-defaultHeight>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.defaultHeight.<get-defaultHeight>|<get-defaultHeight>(){}[0]
    final val defaultWidth // io.github.composegears.valkyrie.ir/IrImageVector.defaultWidth|{}defaultWidth[0]
        final fun <get-defaultWidth>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.defaultWidth.<get-defaultWidth>|<get-defaultWidth>(){}[0]
    final val name // io.github.composegears.valkyrie.ir/IrImageVector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.github.composegears.valkyrie.ir/IrImageVector.name.<get-name>|<get-name>(){}[0]
    final val nodes // io.github.composegears.valkyrie.ir/IrImageVector.nodes|{}nodes[0]
        final fun <get-nodes>(): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrVectorNode> // io.github.composegears.valkyrie.ir/IrImageVector.nodes.<get-nodes>|<get-nodes>(){}[0]
    final val viewportHeight // io.github.composegears.valkyrie.ir/IrImageVector.viewportHeight|{}viewportHeight[0]
        final fun <get-viewportHeight>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.viewportHeight.<get-viewportHeight>|<get-viewportHeight>(){}[0]
    final val viewportWidth // io.github.composegears.valkyrie.ir/IrImageVector.viewportWidth|{}viewportWidth[0]
        final fun <get-viewportWidth>(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.viewportWidth.<get-viewportWidth>|<get-viewportWidth>(){}[0]

    final fun component1(): kotlin/String // io.github.composegears.valkyrie.ir/IrImageVector.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrImageVector.component2|component2(){}[0]
    final fun component3(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.component3|component3(){}[0]
    final fun component4(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.component4|component4(){}[0]
    final fun component5(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.component5|component5(){}[0]
    final fun component6(): kotlin/Float // io.github.composegears.valkyrie.ir/IrImageVector.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrVectorNode> // io.github.composegears.valkyrie.ir/IrImageVector.component7|component7(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Boolean = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin/Float = ..., kotlin.collections/List<io.github.composegears.valkyrie.ir/IrVectorNode> = ...): io.github.composegears.valkyrie.ir/IrImageVector // io.github.composegears.valkyrie.ir/IrImageVector.copy|copy(kotlin.String;kotlin.Boolean;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float;kotlin.collections.List<io.github.composegears.valkyrie.ir.IrVectorNode>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrImageVector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrImageVector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrImageVector.toString|toString(){}[0]
}

final value class io.github.composegears.valkyrie.ir/IrColor { // io.github.composegears.valkyrie.ir/IrColor|null[0]
    constructor <init>(kotlin/Int) // io.github.composegears.valkyrie.ir/IrColor.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Long) // io.github.composegears.valkyrie.ir/IrColor.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(kotlin/String) // io.github.composegears.valkyrie.ir/IrColor.<init>|<init>(kotlin.String){}[0]

    final val alpha // io.github.composegears.valkyrie.ir/IrColor.alpha|{}alpha[0]
        final fun <get-alpha>(): kotlin/UByte // io.github.composegears.valkyrie.ir/IrColor.alpha.<get-alpha>|<get-alpha>(){}[0]
    final val argb // io.github.composegears.valkyrie.ir/IrColor.argb|{}argb[0]
        final fun <get-argb>(): kotlin/Int // io.github.composegears.valkyrie.ir/IrColor.argb.<get-argb>|<get-argb>(){}[0]
    final val blue // io.github.composegears.valkyrie.ir/IrColor.blue|{}blue[0]
        final fun <get-blue>(): kotlin/UByte // io.github.composegears.valkyrie.ir/IrColor.blue.<get-blue>|<get-blue>(){}[0]
    final val green // io.github.composegears.valkyrie.ir/IrColor.green|{}green[0]
        final fun <get-green>(): kotlin/UByte // io.github.composegears.valkyrie.ir/IrColor.green.<get-green>|<get-green>(){}[0]
    final val red // io.github.composegears.valkyrie.ir/IrColor.red|{}red[0]
        final fun <get-red>(): kotlin/UByte // io.github.composegears.valkyrie.ir/IrColor.red.<get-red>|<get-red>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrColor.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.github.composegears.valkyrie.ir/IrColor.hashCode|hashCode(){}[0]
    final fun isTransparent(): kotlin/Boolean // io.github.composegears.valkyrie.ir/IrColor.isTransparent|isTransparent(){}[0]
    final fun toHexColor(): kotlin/String // io.github.composegears.valkyrie.ir/IrColor.toHexColor|toHexColor(){}[0]
    final fun toHexLiteral(): kotlin/String // io.github.composegears.valkyrie.ir/IrColor.toHexLiteral|toHexLiteral(){}[0]
    final fun toName(): kotlin/String? // io.github.composegears.valkyrie.ir/IrColor.toName|toName(){}[0]
    final fun toString(): kotlin/String // io.github.composegears.valkyrie.ir/IrColor.toString|toString(){}[0]

    final object Companion { // io.github.composegears.valkyrie.ir/IrColor.Companion|null[0]
        final val nameToArgb // io.github.composegears.valkyrie.ir/IrColor.Companion.nameToArgb|{}nameToArgb[0]
            final fun <get-nameToArgb>(): kotlin.collections/Map<kotlin/String, io.github.composegears.valkyrie.ir/IrColor> // io.github.composegears.valkyrie.ir/IrColor.Companion.nameToArgb.<get-nameToArgb>|<get-nameToArgb>(){}[0]
    }
}

final object io.github.composegears.valkyrie.ir.util/ColorClassification { // io.github.composegears.valkyrie.ir.util/ColorClassification|null[0]
    final fun from(kotlin.collections/List<io.github.composegears.valkyrie.ir/IrColor>): io.github.composegears.valkyrie.ir.util/DominantShade // io.github.composegears.valkyrie.ir.util/ColorClassification.from|from(kotlin.collections.List<io.github.composegears.valkyrie.ir.IrColor>){}[0]
}

final val io.github.composegears.valkyrie.ir/aspectRatio // io.github.composegears.valkyrie.ir/aspectRatio|@io.github.composegears.valkyrie.ir.IrImageVector{}aspectRatio[0]
    final fun (io.github.composegears.valkyrie.ir/IrImageVector).<get-aspectRatio>(): kotlin/Float // io.github.composegears.valkyrie.ir/aspectRatio.<get-aspectRatio>|<get-aspectRatio>@io.github.composegears.valkyrie.ir.IrImageVector(){}[0]

final fun (io.github.composegears.valkyrie.ir/IrImageVector).io.github.composegears.valkyrie.ir.util/iconColors(): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrColor> // io.github.composegears.valkyrie.ir.util/iconColors|iconColors@io.github.composegears.valkyrie.ir.IrImageVector(){}[0]
final fun (kotlin/Char).io.github.composegears.valkyrie.ir.util/toPathNodes(kotlin/FloatArray): kotlin.collections/List<io.github.composegears.valkyrie.ir/IrPathNode> // io.github.composegears.valkyrie.ir.util/toPathNodes|toPathNodes@kotlin.Char(kotlin.FloatArray){}[0]
